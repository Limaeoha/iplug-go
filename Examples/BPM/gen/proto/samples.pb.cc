// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples.proto

#include "samples.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_samples_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplePacket_Channel_samples_2eproto;
namespace samples {
class SamplePacket_ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplePacket_Channel> _instance;
} _SamplePacket_Channel_default_instance_;
class SamplePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplePacket> _instance;
} _SamplePacket_default_instance_;
}  // namespace samples
static void InitDefaultsscc_info_SamplePacket_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::samples::_SamplePacket_default_instance_;
    new (ptr) ::samples::SamplePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamplePacket_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SamplePacket_samples_2eproto}, {
      &scc_info_SamplePacket_Channel_samples_2eproto.base,}};

static void InitDefaultsscc_info_SamplePacket_Channel_samples_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::samples::_SamplePacket_Channel_default_instance_;
    new (ptr) ::samples::SamplePacket_Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplePacket_Channel_samples_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SamplePacket_Channel_samples_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_samples_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_samples_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_samples_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_samples_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket_Channel, samples_),
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, nframes_),
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, nchans_),
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, samplerate_),
  PROTOBUF_FIELD_OFFSET(::samples::SamplePacket, channels_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::samples::SamplePacket_Channel)},
  { 6, 15, sizeof(::samples::SamplePacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::samples::_SamplePacket_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::samples::_SamplePacket_default_instance_),
};

const char descriptor_table_protodef_samples_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsamples.proto\022\007samples\"\220\001\n\014SamplePacke"
  "t\022\017\n\007nFrames\030\001 \001(\005\022\016\n\006nChans\030\002 \001(\005\022\022\n\nsa"
  "mpleRate\030\003 \001(\005\022/\n\010channels\030\004 \003(\0132\035.sampl"
  "es.SamplePacket.Channel\032\032\n\007Channel\022\017\n\007sa"
  "mples\030\001 \003(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_samples_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_samples_2eproto_sccs[2] = {
  &scc_info_SamplePacket_samples_2eproto.base,
  &scc_info_SamplePacket_Channel_samples_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_samples_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_samples_2eproto = {
  false, false, descriptor_table_protodef_samples_2eproto, "samples.proto", 171,
  &descriptor_table_samples_2eproto_once, descriptor_table_samples_2eproto_sccs, descriptor_table_samples_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_samples_2eproto::offsets,
  file_level_metadata_samples_2eproto, 2, file_level_enum_descriptors_samples_2eproto, file_level_service_descriptors_samples_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_samples_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_samples_2eproto)), true);
namespace samples {

// ===================================================================

class SamplePacket_Channel::_Internal {
 public:
};

SamplePacket_Channel::SamplePacket_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  samples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:samples.SamplePacket.Channel)
}
SamplePacket_Channel::SamplePacket_Channel(const SamplePacket_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:samples.SamplePacket.Channel)
}

void SamplePacket_Channel::SharedCtor() {
}

SamplePacket_Channel::~SamplePacket_Channel() {
  // @@protoc_insertion_point(destructor:samples.SamplePacket.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplePacket_Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SamplePacket_Channel::ArenaDtor(void* object) {
  SamplePacket_Channel* _this = reinterpret_cast< SamplePacket_Channel* >(object);
  (void)_this;
}
void SamplePacket_Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplePacket_Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplePacket_Channel& SamplePacket_Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplePacket_Channel_samples_2eproto.base);
  return *internal_default_instance();
}


void SamplePacket_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:samples.SamplePacket.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplePacket_Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_samples(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_samples(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplePacket_Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:samples.SamplePacket.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double samples = 1;
  for (int i = 0, n = this->_internal_samples_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_samples(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:samples.SamplePacket.Channel)
  return target;
}

size_t SamplePacket_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:samples.SamplePacket.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double samples = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_samples_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_samples_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplePacket_Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:samples.SamplePacket.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplePacket_Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplePacket_Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:samples.SamplePacket.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:samples.SamplePacket.Channel)
    MergeFrom(*source);
  }
}

void SamplePacket_Channel::MergeFrom(const SamplePacket_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:samples.SamplePacket.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
}

void SamplePacket_Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:samples.SamplePacket.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplePacket_Channel::CopyFrom(const SamplePacket_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:samples.SamplePacket.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplePacket_Channel::IsInitialized() const {
  return true;
}

void SamplePacket_Channel::InternalSwap(SamplePacket_Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  samples_.InternalSwap(&other->samples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplePacket_Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SamplePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<SamplePacket>()._has_bits_);
  static void set_has_nframes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nchans(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_samplerate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SamplePacket::SamplePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:samples.SamplePacket)
}
SamplePacket::SamplePacket(const SamplePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nframes_, &from.nframes_,
    static_cast<size_t>(reinterpret_cast<char*>(&samplerate_) -
    reinterpret_cast<char*>(&nframes_)) + sizeof(samplerate_));
  // @@protoc_insertion_point(copy_constructor:samples.SamplePacket)
}

void SamplePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamplePacket_samples_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nframes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&samplerate_) -
      reinterpret_cast<char*>(&nframes_)) + sizeof(samplerate_));
}

SamplePacket::~SamplePacket() {
  // @@protoc_insertion_point(destructor:samples.SamplePacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SamplePacket::ArenaDtor(void* object) {
  SamplePacket* _this = reinterpret_cast< SamplePacket* >(object);
  (void)_this;
}
void SamplePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplePacket& SamplePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplePacket_samples_2eproto.base);
  return *internal_default_instance();
}


void SamplePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:samples.SamplePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&nframes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&samplerate_) -
        reinterpret_cast<char*>(&nframes_)) + sizeof(samplerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nFrames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nframes(&has_bits);
          nframes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nChans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nchans(&has_bits);
          nchans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sampleRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_samplerate(&has_bits);
          samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .samples.SamplePacket.Channel channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:samples.SamplePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nFrames = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nframes(), target);
  }

  // optional int32 nChans = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nchans(), target);
  }

  // optional int32 sampleRate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_samplerate(), target);
  }

  // repeated .samples.SamplePacket.Channel channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:samples.SamplePacket)
  return target;
}

size_t SamplePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:samples.SamplePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .samples.SamplePacket.Channel channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nFrames = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nframes());
    }

    // optional int32 nChans = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nchans());
    }

    // optional int32 sampleRate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_samplerate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:samples.SamplePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:samples.SamplePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:samples.SamplePacket)
    MergeFrom(*source);
  }
}

void SamplePacket::MergeFrom(const SamplePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:samples.SamplePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      nframes_ = from.nframes_;
    }
    if (cached_has_bits & 0x00000002u) {
      nchans_ = from.nchans_;
    }
    if (cached_has_bits & 0x00000004u) {
      samplerate_ = from.samplerate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SamplePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:samples.SamplePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplePacket::CopyFrom(const SamplePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:samples.SamplePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplePacket::IsInitialized() const {
  return true;
}

void SamplePacket::InternalSwap(SamplePacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplePacket, samplerate_)
      + sizeof(SamplePacket::samplerate_)
      - PROTOBUF_FIELD_OFFSET(SamplePacket, nframes_)>(
          reinterpret_cast<char*>(&nframes_),
          reinterpret_cast<char*>(&other->nframes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace samples
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::samples::SamplePacket_Channel* Arena::CreateMaybeMessage< ::samples::SamplePacket_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::samples::SamplePacket_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::samples::SamplePacket* Arena::CreateMaybeMessage< ::samples::SamplePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::samples::SamplePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
