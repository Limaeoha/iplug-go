// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: samples.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_samples_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_samples_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_samples_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_samples_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_samples_2eproto;
namespace samples {
class SamplePacket;
class SamplePacketDefaultTypeInternal;
extern SamplePacketDefaultTypeInternal _SamplePacket_default_instance_;
class SamplePacket_Channel;
class SamplePacket_ChannelDefaultTypeInternal;
extern SamplePacket_ChannelDefaultTypeInternal _SamplePacket_Channel_default_instance_;
}  // namespace samples
PROTOBUF_NAMESPACE_OPEN
template<> ::samples::SamplePacket* Arena::CreateMaybeMessage<::samples::SamplePacket>(Arena*);
template<> ::samples::SamplePacket_Channel* Arena::CreateMaybeMessage<::samples::SamplePacket_Channel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace samples {

// ===================================================================

class SamplePacket_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:samples.SamplePacket.Channel) */ {
 public:
  inline SamplePacket_Channel() : SamplePacket_Channel(nullptr) {}
  virtual ~SamplePacket_Channel();

  SamplePacket_Channel(const SamplePacket_Channel& from);
  SamplePacket_Channel(SamplePacket_Channel&& from) noexcept
    : SamplePacket_Channel() {
    *this = ::std::move(from);
  }

  inline SamplePacket_Channel& operator=(const SamplePacket_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplePacket_Channel& operator=(SamplePacket_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplePacket_Channel& default_instance();

  static inline const SamplePacket_Channel* internal_default_instance() {
    return reinterpret_cast<const SamplePacket_Channel*>(
               &_SamplePacket_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SamplePacket_Channel& a, SamplePacket_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplePacket_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplePacket_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplePacket_Channel* New() const final {
    return CreateMaybeMessage<SamplePacket_Channel>(nullptr);
  }

  SamplePacket_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplePacket_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplePacket_Channel& from);
  void MergeFrom(const SamplePacket_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplePacket_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "samples.SamplePacket.Channel";
  }
  protected:
  explicit SamplePacket_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_samples_2eproto);
    return ::descriptor_table_samples_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated double samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  private:
  double _internal_samples(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_samples() const;
  void _internal_add_samples(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_samples();
  public:
  double samples(int index) const;
  void set_samples(int index, double value);
  void add_samples(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_samples();

  // @@protoc_insertion_point(class_scope:samples.SamplePacket.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_samples_2eproto;
};
// -------------------------------------------------------------------

class SamplePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:samples.SamplePacket) */ {
 public:
  inline SamplePacket() : SamplePacket(nullptr) {}
  virtual ~SamplePacket();

  SamplePacket(const SamplePacket& from);
  SamplePacket(SamplePacket&& from) noexcept
    : SamplePacket() {
    *this = ::std::move(from);
  }

  inline SamplePacket& operator=(const SamplePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplePacket& operator=(SamplePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplePacket& default_instance();

  static inline const SamplePacket* internal_default_instance() {
    return reinterpret_cast<const SamplePacket*>(
               &_SamplePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SamplePacket& a, SamplePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplePacket* New() const final {
    return CreateMaybeMessage<SamplePacket>(nullptr);
  }

  SamplePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplePacket& from);
  void MergeFrom(const SamplePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "samples.SamplePacket";
  }
  protected:
  explicit SamplePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_samples_2eproto);
    return ::descriptor_table_samples_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SamplePacket_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 4,
    kNFramesFieldNumber = 1,
    kNChansFieldNumber = 2,
    kSampleRateFieldNumber = 3,
  };
  // repeated .samples.SamplePacket.Channel channels = 4;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::samples::SamplePacket_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::samples::SamplePacket_Channel >*
      mutable_channels();
  private:
  const ::samples::SamplePacket_Channel& _internal_channels(int index) const;
  ::samples::SamplePacket_Channel* _internal_add_channels();
  public:
  const ::samples::SamplePacket_Channel& channels(int index) const;
  ::samples::SamplePacket_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::samples::SamplePacket_Channel >&
      channels() const;

  // optional int32 nFrames = 1;
  bool has_nframes() const;
  private:
  bool _internal_has_nframes() const;
  public:
  void clear_nframes();
  ::PROTOBUF_NAMESPACE_ID::int32 nframes() const;
  void set_nframes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nframes() const;
  void _internal_set_nframes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 nChans = 2;
  bool has_nchans() const;
  private:
  bool _internal_has_nchans() const;
  public:
  void clear_nchans();
  ::PROTOBUF_NAMESPACE_ID::int32 nchans() const;
  void set_nchans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nchans() const;
  void _internal_set_nchans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sampleRate = 3;
  bool has_samplerate() const;
  private:
  bool _internal_has_samplerate() const;
  public:
  void clear_samplerate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate() const;
  void set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_samplerate() const;
  void _internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:samples.SamplePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::samples::SamplePacket_Channel > channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 nframes_;
  ::PROTOBUF_NAMESPACE_ID::int32 nchans_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate_;
  friend struct ::TableStruct_samples_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SamplePacket_Channel

// repeated double samples = 1;
inline int SamplePacket_Channel::_internal_samples_size() const {
  return samples_.size();
}
inline int SamplePacket_Channel::samples_size() const {
  return _internal_samples_size();
}
inline void SamplePacket_Channel::clear_samples() {
  samples_.Clear();
}
inline double SamplePacket_Channel::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline double SamplePacket_Channel::samples(int index) const {
  // @@protoc_insertion_point(field_get:samples.SamplePacket.Channel.samples)
  return _internal_samples(index);
}
inline void SamplePacket_Channel::set_samples(int index, double value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:samples.SamplePacket.Channel.samples)
}
inline void SamplePacket_Channel::_internal_add_samples(double value) {
  samples_.Add(value);
}
inline void SamplePacket_Channel::add_samples(double value) {
  _internal_add_samples(value);
  // @@protoc_insertion_point(field_add:samples.SamplePacket.Channel.samples)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SamplePacket_Channel::_internal_samples() const {
  return samples_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SamplePacket_Channel::samples() const {
  // @@protoc_insertion_point(field_list:samples.SamplePacket.Channel.samples)
  return _internal_samples();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SamplePacket_Channel::_internal_mutable_samples() {
  return &samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SamplePacket_Channel::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:samples.SamplePacket.Channel.samples)
  return _internal_mutable_samples();
}

// -------------------------------------------------------------------

// SamplePacket

// optional int32 nFrames = 1;
inline bool SamplePacket::_internal_has_nframes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SamplePacket::has_nframes() const {
  return _internal_has_nframes();
}
inline void SamplePacket::clear_nframes() {
  nframes_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::_internal_nframes() const {
  return nframes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::nframes() const {
  // @@protoc_insertion_point(field_get:samples.SamplePacket.nFrames)
  return _internal_nframes();
}
inline void SamplePacket::_internal_set_nframes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  nframes_ = value;
}
inline void SamplePacket::set_nframes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nframes(value);
  // @@protoc_insertion_point(field_set:samples.SamplePacket.nFrames)
}

// optional int32 nChans = 2;
inline bool SamplePacket::_internal_has_nchans() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SamplePacket::has_nchans() const {
  return _internal_has_nchans();
}
inline void SamplePacket::clear_nchans() {
  nchans_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::_internal_nchans() const {
  return nchans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::nchans() const {
  // @@protoc_insertion_point(field_get:samples.SamplePacket.nChans)
  return _internal_nchans();
}
inline void SamplePacket::_internal_set_nchans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nchans_ = value;
}
inline void SamplePacket::set_nchans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nchans(value);
  // @@protoc_insertion_point(field_set:samples.SamplePacket.nChans)
}

// optional int32 sampleRate = 3;
inline bool SamplePacket::_internal_has_samplerate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SamplePacket::has_samplerate() const {
  return _internal_has_samplerate();
}
inline void SamplePacket::clear_samplerate() {
  samplerate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::_internal_samplerate() const {
  return samplerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SamplePacket::samplerate() const {
  // @@protoc_insertion_point(field_get:samples.SamplePacket.sampleRate)
  return _internal_samplerate();
}
inline void SamplePacket::_internal_set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  samplerate_ = value;
}
inline void SamplePacket::set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:samples.SamplePacket.sampleRate)
}

// repeated .samples.SamplePacket.Channel channels = 4;
inline int SamplePacket::_internal_channels_size() const {
  return channels_.size();
}
inline int SamplePacket::channels_size() const {
  return _internal_channels_size();
}
inline void SamplePacket::clear_channels() {
  channels_.Clear();
}
inline ::samples::SamplePacket_Channel* SamplePacket::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:samples.SamplePacket.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::samples::SamplePacket_Channel >*
SamplePacket::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:samples.SamplePacket.channels)
  return &channels_;
}
inline const ::samples::SamplePacket_Channel& SamplePacket::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::samples::SamplePacket_Channel& SamplePacket::channels(int index) const {
  // @@protoc_insertion_point(field_get:samples.SamplePacket.channels)
  return _internal_channels(index);
}
inline ::samples::SamplePacket_Channel* SamplePacket::_internal_add_channels() {
  return channels_.Add();
}
inline ::samples::SamplePacket_Channel* SamplePacket::add_channels() {
  // @@protoc_insertion_point(field_add:samples.SamplePacket.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::samples::SamplePacket_Channel >&
SamplePacket::channels() const {
  // @@protoc_insertion_point(field_list:samples.SamplePacket.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace samples

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_samples_2eproto
